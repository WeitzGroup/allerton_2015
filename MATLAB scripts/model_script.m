%% Initialize Parameters
clear; clc; close all
n = 30; % Number of agents in the network

% The benchmark network used for simulation throughout the paper - consists
% of the variables A_C, A_I, and coordinates, generated by the procedure
% below (commented out)
load('sample_networks_30_PAPER') 

% [A_C,coordinates] = generate_geometric_network(n,20,20,7);
% A_C = double(A_C);
% A_I = generate_infoNetwork(A_C,1/4,.01);
% A_I = double(A_I);
% 
% temp = zeros(n,1); temp(1) = 1;
% visualize_network(A_C,coordinates,temp,36)
% title('contact')
% movegui('northwest')
% hold off; figure
% visualize_network(A_I,coordinates,temp,36)
% title('info')
% movegui('southwest')

beta = .12;  % Disease infection rate
delta = .08; % Curing rate
%% Fixed point plots (Generate Data for Figure 3)
% This simulation may take between 10-15 minutes

lambda_contact = max(eig(A_C)); % Max eigenvalue of contact adjacency matrix
alpha = [1/3 1/3 1/3]; % Awareness parameters
int1 = linspace(0,lambda_contact,20);
delta = beta*int1; % Sample points for x-axis (epidemic ratio)
FPs = zeros(length(delta),2);
iters = 2000;

s = struct('AM',[]); s = repmat(s,n,1);
M = zeros(n,n);
for i = 1 : n
    M_i = [(1/sum(A_I(i,:)))*A_I(i,:); (1/sum(A_C(i,:)))*A_C(i,:); (1/n)*ones(1,n)];
    s(i).AM = A_C(:,i)*alpha*M_i;
    M(i,:) = alpha*M_i;
end
Q = blkdiag(s(:).AM);

for k = 1 : length(delta);
    
    % Function handles for phi and psi mappings (eqs 6 & 7 in paper)
    phi = @(x) (beta*A_C + (1-delta(k))*eye(n))*x - diag(x)*beta*A_C*x - ... 
        (eye(n) - diag(x))*beta*kron(eye(n),x')*Q*repmat(x,n,1);
    psi = @(x) (beta*A_C + (1-delta(k))*eye(n))*x - diag(x)*beta*A_C*x; 
    p = rand(n,1); 
    q = p;
    for i = 2 : iters
        p = phi(p);
        q = psi(q);
    end
    FPs(k,1) = norm(p,1); FPs(k,2) = norm(q,1);
end
%% Plot Figure 3
close all
plot(delta/beta,FPs(:,1),'LineWidth',2)
hold on
plot(delta/beta,FPs(:,2),'r','LineWidth',2)
plot([lambda_contact,lambda_contact],[0,30],'k--')

ylabel('$\|\cdot\|$','Interpreter','LaTex')
xlabel('$\delta/\beta$','Interpreter','LaTex')
legend('boxoff')
set(gca,'fontsize',14);
set(gca,'linewidth',2);
legend('With Awareness','No Awareness')
legend('boxoff')
%% Markovian dynamics and MFA plots (Figures 4 and 5)
clc; close all
% alpha = [0 0 1];
% alpha = [0 1 0];
% alpha = [1 0 0];
alpha = [1/3 1/3 1/3];
iters = 200;
s = struct('AM',[]); s = repmat(s,n,1);

M = zeros(n,n);
for i = 1 : n
    M_i = [(1/sum(A_C(i,:)))*A_C(i,:); (1/sum(A_I(i,:)))*A_I(i,:);  (1/n)*ones(1,n)];
    s(i).AM = A_C(:,i)*alpha*M_i;
    M(i,:) = alpha*M_i;
end
Q = blkdiag(s(:).AM);

% Function handles for phi and psi mappings (eqs 6 & 7 in paper)
phi = @(x) (beta*A_C + (1-delta)*eye(n))*x - diag(x)*beta*A_C*x - ... 
    (eye(n) - diag(x))*beta*kron(eye(n),x')*Q*repmat(x,n,1);
psi = @(x) (beta*A_C + (1-delta)*eye(n))*x - diag(x)*beta*A_C*x; % Benchmark model

T = 200;
state = zeros(n,T); 
state(1:3,1) = 1; % Initial infected agents

% Markovian Dynamics with awareness
[total_infections,dummy,betas] = epidemic_distancing(beta,delta,alpha,A_C,A_I,T,state);

% Markov dynamics (no awareness)
total_infections_H = epidemic_homogeneous(beta,delta,A_C,T,state);

beta_0 = mean(sum(betas,1)/n); % Averaged Social Interactions over agents and run-time
psi_0 = @(x) (beta_0*A_C + (1-delta)*eye(n))*x - diag(x)*beta_0*A_C*x; % No Awareness with beta_0
total_infections_0 = epidemic_homogeneous(beta_0,delta,A_C,T,state);

p = state(:,1); q = p; p0 = p;

norms_p = zeros(iters,1); norms_p(1) = norm(p,1);
norms_q = norms_p; norms_p0 = norms_p;

% Data for fig 4b
for i = 2 : iters
    p = phi(p); norms_p(i) = norm(p,1);
    q = psi(q); norms_q(i) = norm(q,1);
    p0 = psi_0(p0); norms_p0(i) = norm(p0,1);
end

% Plot Fig 4a
plot(total_infections/n,'b')
hold on
plot(total_infections_0/n,'g')
plot(total_infections_H/n,'r')
plot((norm(p,1)/n)*ones(T,1),'b--')
plot((norm(q,1)/n)*ones(T,1),'r--')
plot((norm(p0,1)/n)*ones(T,1),'g--')
xlabel('Time')
ylabel('Fraction Infected')
axis([0 T 0 1])
set(gca,'fontsize',14);
set(gca,'linewidth',2);
h3 = legend('With Awareness','No Awareness, $\beta_0$','No Awareness, $\beta$');
set(h3,'Interpreter','latex')
legend('boxoff')
movegui('northwest')

% Plot Fig 4b
hold off; figure
plot(0:iters-1,norms_p/n,'b','LineWidth',2)
hold on
plot(0:iters-1,norms_p0/n,'g','LineWidth',2)
plot(0:iters-1,norms_q/n,'r','LineWidth',2)
xlabel('Time')
ylabel('$\|\cdot\|/n$','Interpreter','latex')
h = legend('With Awareness','No Awareness, $\beta_0$','No Awareness, $\beta$');
set(h,'Interpreter','latex')
set(gca,'fontsize',14);
set(gca,'linewidth',2);
legend('boxoff')
movegui('north')

% Plot Fig 5
hold off; figure
avg_betas = sum(betas,1)/n;
beta_0 = mean(avg_betas);
plot(0:T-1,avg_betas/beta,'b')
hold on
plot(0:T-1,ones(T,1)*beta_0/beta,'g')
plot(0:T-1,ones(T,1),'r')
xlabel('Time')
ylabel('Average Social Interaction')
axis([0 T 0 1.1])
set(gca,'fontsize',14);
set(gca,'linewidth',2);
h2 = legend('With Awareness','Averaged Interaction','No Awareness');
set(h2,'Interpreter','latex')
legend('boxoff')
movegui('northeast')

%% J and U metrics (Generate data for Fig 6)
% These simulations take several hours to finish when averaging over 10000
% replicate runs
close all; clc
T = 25;
reps = 10000; 
step = .05;
J = zeros(length(0:step:1),length(0:step:1));
U = J;
% EFFICIENCY METRIC (J) is calculated on sample points on the 3-simplex
row = 1; 
for v = 0 : step : 1
    incr = 0 : step : 1-v; % tradeoff increment
    g = zeros(1,length(incr));
    for i = 1 : length(incr)
        alpha = [incr(i), v, 1-incr(i)-v];
        temp_util = zeros(reps,1);
        for k = 1 : reps
            state = zeros(n,T); state(1:3,1) = 1; 
            [dummy,temp_util(k),dummy2] = epidemic_distancing(beta,delta,alpha,A_C,A_I,T,state);
        end
        g(i) = mean(temp_util);
    end
    J(row,1:length(incr)) = g;
    row = row + 1;
end

% PREVENTION METRIC (U)
row = 1; 
T = 200; 
for v = 0 : step : 1
    incr = 0 : step : 1-v; % tradeoff increment
    u = zeros(1,length(incr));
    for i = 1 : length(incr)
        alpha = [incr(i), v, 1-incr(i)-v];
        for k = 1 : reps
            state = zeros(n,T); state(1:3,1) = 1; 
            [total_infections,dummy,dummy2] = epidemic_distancing(beta,delta,alpha,A_C,A_I,T,state);
            total_infections_H = epidemic_homogeneous(beta,delta,A_C,T,state);

            u(i) = u(i) + sum(total_infections_H - total_infections)/(n*T);
        end
        u(i) = u(i)/reps;
    end
    U(row,1:length(incr)) = u;
    row = row + 1;
end
%% Plot Fig 6
close all
step = .05;
[X,Y] = meshgrid(0:step:1,0:step:1);
for i = 1 : length(X)
    for j = 1 : length(X)
        if X(i,j)+Y(i,j) > 1
            J(i,j) = NaN;
            U(i,j) = NaN;
        end
    end
end
surf(X,Y,J)
xlabel('$\alpha_1$','Interpreter','latex')
ylabel('$\alpha_2$','Interpreter','latex')
zlabel('$J(\alpha)$','Interpreter','latex')
set(gca,'fontsize',14);
set(gca,'linewidth',2);
colorbar

hold off; figure
surf(X,Y,U)
xlabel('$\alpha_1$','Interpreter','latex')
ylabel('$\alpha_2$','Interpreter','latex')
zlabel('$U(\alpha)$','Interpreter','latex')
set(gca,'fontsize',14);
set(gca,'linewidth',2);
colorbar

%%
close all; clear; clc
load('U.mat')
step = .05;
x = 0:step:1; y = x;

imagesc(x,y,U)
axis('xy')
xlabel('$\alpha_1$','Interpreter','latex')
ylabel('$\alpha_2$','Interpreter','latex')
title('$U(\alpha)$','Interpreter','latex')
set(gca,'fontsize',14);
set(gca,'linewidth',2);
colorbar

    
    